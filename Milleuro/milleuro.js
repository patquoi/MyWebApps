 /*  Fichier : Milleuro.js  Rôle : JavaScript lié au fichier index.html   Version : <2.3>  Copyright (C) 2014 Patrice Fouquet. Tous droits réservés.  */ //---------------------------------------------------------------------------const stVersion = '2.3';//---------------------------------------------------------------------------const monnaies = 23; // v1.2 (+7)const dimensions = 6;const dimEnDiag = 11;const directions = 8;const t0 = 320;//---------------------------------------------------------------------------const dx = [0, 0, 1, 1, 1, 0, -1, -1, -1];const dy = [0,-1,-1, 0, 1, 1,  1,  0, -1];//---------------------------------------------------------------------------// v1.2 (+7)const svt = [0,3,3,0, 6, 6, 0,  9,  9,  0,  12,  12,   0,   15,   15,    0,    18,    18,     0,     21,     21,      0,      24,       0];const ter = [0,1,1,0, 1, 1, 0,  1,  1,  0,   1,   1,   0,    1,    1,    0,     1,     1,     0,      1,      1,      0,       1,       0];const bis = [0,1,0,1, 1, 0, 1,  1,  0,  1,   1,   0,   1,    1,    0,    1,     1,     0,     1,      1,      0,      1,       1,       0];const val = [0,1,2,5,10,20,50,100,200,500,1000,2000,5000,10000,20000,50000,100000,200000,500000,1000000,2000000,5000000,10000000,20000000];//---------------------------------------------------------------------------// v2.1 (Faces de pièces : nombre et suffixes png)const pfpMax = 1000; // Probabilité max affichage face de pièceconst nfp = [0,20,20,20,20,20,20,20,52, 0,   0,   0,   0,    0,    0,    0,     0,     0,     0,      0,      0,      0,       0,       0];const sfp = ['', 'aa','ab','ac','ad','ae','af','ag','ah','ai','aj','ak','al','am','an','ao','ap','aq','ar','as','at','au','av','aw','ax','ay','az',                   'ba','bb','bc','bd','be','bf','bg','bh','bi','bj','bk','bl','bm','bn','bo','bp','bq','br','bs','bt','bu','bv','bw','bx','by','bz'];//---------------------------------------------------------------------------const bgc = ['#EFEFEF', // Case vide = gris             '#FFEFDF','#FFDFBF','#FFCF9F', //Pièces rouges = rouge. v2.1 : le dégradé est plus prononcé pour différencier les faces de pièces             '#FFFFDF','#FFF7BF','#FFEF9F', //Pièces jaunes = jaune             '#DFEFFF','#CFE7FF', //Pièces blanches/jaunes = bleu             '#EFEFEF','#EFEFEF','#EFEFEF','#EFEFEF','#EFEFEF','#EFEFEF','#EFEFEF','#EFEFEF','#EFEFEF','#EFEFEF', // Billets = gris             '#DFFFEF','#CFFFE7','#BFFFDF','#AFFFD7',             '#FFD7AF']; // v1.2 : Diamant = rouge//---------------------------------------------------------------------------const chmPng = 'png/';const extPng = '.png';const vide = '';const rien = '0';const noir = 'n';const rouge = 'r';const fond = 'b';const raz = 'raz';const ok = 'ok';const go = 'go';const tuto = 'tuto';const posTutoChg = 6; // v2.2 : Réduction du tutoriel de 3/5const posTutoMax = 48; // v2.2 : Réduction du tutoriel de 3/5 const posTutoDemi = 24; // v2.2 : Réduction du tutoriel de 3/5 const choix = 'chx';const info = 'info';const euro = 'euro';const idDir = [' ','h','hd','d','bd','b','bg','g','hg'];const idMvt = [' ','n','ne','e','se','s','so','o','no'];const imgCoul = 'nr';const idMonnaieMin = 'mm'; // v1.2const idMonnaieTop = 'mt';const idTopMonnaieTop = 'tmt';const idTopMonnaieMin = 'mmt'; // v1.2 : Pour ne pas confondre avec 'tmm' (milliers de milliers de cents du score top)const idScore = 's';const idTop = 't';const idEuro = 'e';const stScore = 'score';const stTop = 'top'const tc = [[[0,0,0,2,-1,-1],             [0,0,2,-1,1,-1],             [0,0,0,0,3,-1],             [0,2,-1,7,-1,-1],             [0,0,0,4,6,-1],             [0,0,0,3,2,-1]],            [[0,0,0,0,0,2],             [0,0,0,0,2,1],             [0,0,0,0,0,3],             [0,0,0,0,2,7],             [0,0,0,0,4,6],             [0,0,0,0,3,2]],            [[0,3,-1,3,-1,-1],             [2,2,2,2,2,-1],             [0,2,1,-1,2,-1],             [0,0,1,2,2,-1],             [0,2,-1,2,1,-1],             [0,0,1,-1,1,-1]],            [[0,0,0,0,0,4],             [0,0,0,0,0,4],             [0,0,0,0,0,3],             [0,0,0,0,0,3],             [0,0,0,0,0,3],             [0,0,0,0,0,2]]];const td = [[[2],             [1,-1],             [0,3,-1],             [7,-1,5,-1],             [4,-1,-1,6,-1],             [5,-1,4,-1,2,-1],             [6,-1,3,-1,-1],             [0,2,-1,-1],             [4,2,-1],             [3,-1],             [1]],            [[2],             [0,1],             [0,0,3],             [0,0,7,5],             [0,0,0,4,6],             [0,0,0,5,4,2],             [0,0,0,6,3],             [0,0,0,2],             [0,4,2],             [0,3],             [1]]];//---------------------------------------------------------------------------const haut = 1;const hautDroite = 2;const droite = 3;const basDroite = 4;const bas = 5;const basGauche = 6;const gauche = 7;const hautGauche = 8;//---------------------------------------------------------------------------var imgRAZ = null;    	// Ne pas sauvegardervar taille = 32;        // Ne pas sauvegardervar score = 0;var monnaieMin = 1;		// Ne pas sauvegarder (recalculé)var monnaieTop = 0;  var topScore = 0;       // Sauvegardé hors partie var topMonnaieMin = 1; 	// v1.2. Sauvegardé hors partievar topMonnaieTop = 0; 	// Sauvegardé hors partievar fin = false;      	// Ne pas sauvegardervar alerte = false;   	// Ne pas sauvegardervar posTuto = 0; 		// Ne pas sauvegardervar touchable = false;	// Ne pas sauvegardervar pfp = 0; // v2.1 : Probabilité de sortir une face (/1000)var c = [[0,0,0,0,0,0],         [0,0,0,0,0,0],         [0,0,0,0,0,0],         [0,0,0,0,0,0],         [0,0,0,0,0,0],         [0,0,0,0,0,0]]; // v2.1 : Faces des pièces var fp = [[0,0,0,0,0,0],           [0,0,0,0,0,0],           [0,0,0,0,0,0],           [0,0,0,0,0,0],           [0,0,0,0,0,0],           [0,0,0,0,0,0]];        //---------------------------------------------------------------------------function afficheCase(x, y){  localStorage.setItem('c'+(x)+(y), c[x][y]);  localStorage.setItem('fp'+(x)+(y), fp[x][y]);  // v2.1  var k = taille/t0;  var img = document.getElementById(vide + x + vide + y + vide);  img.height = Math.round(k*t0);  img.width = Math.round(k*t0);  if (c[x][y]<0) {    img.src = chmPng + idMvt[-c[x][y]] + extPng;     document.getElementById(fond + x + vide + y).bgColor = bgc[0];  }  else {    img.src = chmPng + val[c[x][y]] + sfp[fp[x][y]] + extPng; // v2.1 : ajout sfp    document.getElementById(fond + x + vide + y).bgColor = bgc[c[x][y]];  }}//---------------------------------------------------------------------------function afficheScore(){  localStorage.s = score;  if (score>topScore) {    topScore = score;    localStorage.ts = topScore;    afficheTops();  }  var zerosSignificatifs = false;  var chfScore = [score%10,                  (Math.floor(score/10)%10),                  (Math.floor(score/100)%10),                  (Math.floor(score/1000)%10),                  (Math.floor(score/10000)%10),                  (Math.floor(score/100000)%10),                  (Math.floor(score/1000000)%10),                  (Math.floor(score/10000000)%10),                  (Math.floor(score/100000000)%10),                  (Math.floor(score/1000000000)%10)]; // v1.2  document.getElementById('smmm').src = chmPng + (chfScore[9]?chfScore[9]+noir:rien) + extPng; // v1.2  zerosSignificatifs = zerosSignificatifs || (chfScore[9]>0); // v1.2  document.getElementById('scmm').src = chmPng + (chfScore[8]?chfScore[8]+noir:(zerosSignificatifs?chfScore[8]+noir:rien)) + extPng; // v1.2  zerosSignificatifs = zerosSignificatifs || (chfScore[8]>0);   document.getElementById('sdmm').src = chmPng + (chfScore[7]?chfScore[7]+noir:(zerosSignificatifs?chfScore[7]+noir:rien)) + extPng; // v1.2  zerosSignificatifs = zerosSignificatifs || (chfScore[7]>0);   document.getElementById('smm').src = chmPng + (chfScore[6]?chfScore[6]+noir:(zerosSignificatifs?chfScore[6]+noir:rien)) + extPng;  zerosSignificatifs = zerosSignificatifs || (chfScore[6]>0);  document.getElementById('scm').src = chmPng + (chfScore[5]?chfScore[5]+noir:(zerosSignificatifs?chfScore[5]+noir:rien)) + extPng;  zerosSignificatifs = zerosSignificatifs || (chfScore[5]>0);  document.getElementById('sdm').src = chmPng + (chfScore[4]?chfScore[4]+noir:(zerosSignificatifs?chfScore[4]+noir:rien)) + extPng;  zerosSignificatifs = zerosSignificatifs || (chfScore[4]>0);  document.getElementById('sm').src = chmPng + (chfScore[3]?chfScore[3]+noir:(zerosSignificatifs?chfScore[3]+noir:rien)) + extPng;  document.getElementById('sc').src = chmPng + chfScore[2] + noir + extPng;  document.getElementById('sd').src = chmPng + chfScore[1] + noir + extPng;  document.getElementById('su').src = chmPng + chfScore[0] + noir + extPng;}//---------------------------------------------------------------------------function afficheMonnaieTop(){  document.getElementById(idMonnaieTop).src = chmPng + val[monnaieTop] + extPng;  document.getElementById(fond + idMonnaieTop).bgColor = bgc[monnaieTop];  document.getElementById(idTopMonnaieTop).src = chmPng + val[topMonnaieTop] + extPng;  document.getElementById(fond + idTopMonnaieTop).bgColor = bgc[topMonnaieTop];    // v1.2 : MonnaieMin affichée    document.getElementById(idMonnaieMin).src = chmPng + val[monnaieMin] + extPng;  document.getElementById(fond + idMonnaieMin).bgColor = bgc[monnaieMin];  document.getElementById(idTopMonnaieMin).src = chmPng + val[topMonnaieMin] + extPng;  document.getElementById(fond + idTopMonnaieMin).bgColor = bgc[topMonnaieMin];}//---------------------------------------------------------------------------function afficheTops(){  var zerosSignificatifs = false;  var chfTop = [topScore%10,                (Math.floor(topScore/10)%10),                (Math.floor(topScore/100)%10),                (Math.floor(topScore/1000)%10),                (Math.floor(topScore/10000)%10),                (Math.floor(topScore/100000)%10),                (Math.floor(topScore/1000000)%10),                (Math.floor(topScore/10000000)%10),                (Math.floor(topScore/100000000)%10),                (Math.floor(topScore/1000000000)%10)]; // v1.2  document.getElementById('tmmm').src = chmPng + (chfTop[9]?chfTop[9]+rouge:rien) + extPng; // v1.2  zerosSignificatifs = zerosSignificatifs || (chfTop[9]>0); // v1.2  document.getElementById('tcmm').src = chmPng + (chfTop[8]?chfTop[8]+rouge:(zerosSignificatifs?chfTop[8]+rouge:rien)) + extPng; // v1.2  zerosSignificatifs = zerosSignificatifs || (chfTop[8]>0);  document.getElementById('tdmm').src = chmPng + (chfTop[7]?chfTop[7]+rouge:(zerosSignificatifs?chfTop[7]+rouge:rien)) + extPng; // v1.2  zerosSignificatifs = zerosSignificatifs || (chfTop[7]>0);  document.getElementById('tmm').src = chmPng + (chfTop[6]?chfTop[6]+rouge:(zerosSignificatifs?chfTop[6]+rouge:rien)) + extPng;  zerosSignificatifs = zerosSignificatifs || (chfTop[6]>0);  document.getElementById('tcm').src = chmPng + (chfTop[5]?chfTop[5]+rouge:(zerosSignificatifs?chfTop[5]+rouge:rien)) + extPng;  zerosSignificatifs = zerosSignificatifs || (chfTop[5]>0);  document.getElementById('tdm').src = chmPng + (chfTop[4]?chfTop[4]+rouge:(zerosSignificatifs?chfTop[4]+rouge:rien)) + extPng;  zerosSignificatifs = zerosSignificatifs || (chfTop[4]>0);  document.getElementById('tm').src = chmPng + (chfTop[3]?chfTop[3]+rouge:(zerosSignificatifs?chfTop[3]+rouge:rien)) + extPng;  document.getElementById('tc').src = chmPng + chfTop[2] + rouge + extPng;  document.getElementById('td').src = chmPng + chfTop[1] + rouge + extPng;  document.getElementById('tu').src = chmPng + chfTop[0] + rouge + extPng;  document.getElementById(idTopMonnaieTop).src = chmPng + val[topMonnaieTop] + extPng;  document.getElementById(idTopMonnaieMin).src = chmPng + val[topMonnaieMin] + extPng; // v1.2}//---------------------------------------------------------------------------function regroupe(d){  var regroupement = false;  switch(d) {    case haut:	      for(var x=0; x<dimensions; x++)        for(var y=0; y<dimensions; y++)          if (!c[x][y])            for(var yy=y+1; yy<dimensions; yy++)              if (c[x][yy]) {                 c[x][y] = c[x][yy];                 fp[x][y] = fp[x][yy]; // v2.1                 afficheCase(x, y);                 c[x][yy] = 0;                 fp[x][yy] = 0; // v2.1                 afficheCase(x, yy);                 regroupement = true;                 break;              }      break;    case hautDroite:	      for(var z=0; z<dimEnDiag; z++)        for(var k=0; k<dimensions-Math.abs(dimensions-z-1); k++) {          x = Math.min(dimensions-1, z) - k;          y = Math.max(0, z-dimensions+1) + k;          if (!c[x][y])            for(var kk=1; kk<dimensions-Math.abs(dimensions-z-1)-k; kk++)              if (c[x-kk][y+kk]) {                 c[x][y] = c[x-kk][y+kk];                 fp[x][y] = fp[x-kk][y+kk]; // v2.1                 afficheCase(x, y);                 c[x-kk][y+kk] = 0;                 fp[x-kk][y+kk] = 0; // v2.1                 afficheCase(x-kk, y+kk);                 regroupement = true;                 break;              }        }      break;    case droite:	      for(var y=0; y<dimensions; y++)        for(var x=dimensions-1; x>=0; x--)          if (!c[x][y])            for(var xx=x-1; xx>=0; xx--)              if (c[xx][y]) {                 c[x][y] = c[xx][y];                 fp[x][y] = fp[xx][y]; // v2.1                 afficheCase(x, y);                 c[xx][y] = 0;                 fp[xx][y] = 0; // v2.1                 afficheCase(xx, y);                 regroupement = true;                 break;              }      break;    case basDroite:	      for(var z=0; z<dimEnDiag; z++)        for(var k=0; k<dimensions-Math.abs(dimensions-z-1); k++) {          x = Math.min(dimensions-1, z) - k;          y = Math.min(dimensions-1, dimEnDiag-z-1) - k;          if (!c[x][y])            for(var kk=1; kk<dimensions-Math.abs(dimensions-z-1)-k; kk++)              if (c[x-kk][y-kk]) {                 c[x][y] = c[x-kk][y-kk];                 fp[x][y] = fp[x-kk][y-kk]; // v2.1                 afficheCase(x, y);                 c[x-kk][y-kk] = 0;                 fp[x-kk][y-kk] = 0; // v2.1                 afficheCase(x-kk, y-kk);                 regroupement = true;                 break;              }        }      break;    case bas:	      for(var x=0; x<dimensions; x++)        for(var y=dimensions-1; y>=0; y--)          if (!c[x][y])            for(var yy=y-1; yy>=0; yy--)              if (c[x][yy]) {                 c[x][y] = c[x][yy];                 fp[x][y] = fp[x][yy]; // v2.1                 afficheCase(x, y);                 c[x][yy] = 0;                 fp[x][yy] = 0; // v2.1                 afficheCase(x, yy);                 regroupement = true;                 break;              }      break;    case basGauche:	      for(var z=0; z<dimEnDiag; z++)        for(var k=0; k<dimensions-Math.abs(dimensions-z-1); k++) {          x = Math.max(0, dimensions-z-1) + k;          y = Math.min(dimensions-1, dimEnDiag-z-1) - k;          if (!c[x][y])            for(var kk=1; kk<dimensions-Math.abs(dimensions-z-1)-k; kk++)              if (c[x+kk][y-kk]) {                 c[x][y] = c[x+kk][y-kk];                 fp[x][y] = fp[x+kk][y-kk]; // v2.1                 afficheCase(x, y);                 c[x+kk][y-kk] = 0;                 fp[x+kk][y-kk] = 0; // v2.1                 afficheCase(x+kk, y-kk);                 regroupement = true;                 break;              }        }      break;    case gauche:	      for(var y=0; y<dimensions; y++)        for(var x=0; x<dimensions; x++)          if (!c[x][y])            for(var xx=x+1; xx<dimensions; xx++)              if (c[xx][y]) {                 c[x][y] = c[xx][y];                 fp[x][y] = fp[xx][y]; // v2.1                 afficheCase(x, y);                 c[xx][y] = 0;                 fp[xx][y] = 0; // v2.1                 afficheCase(xx, y);                 regroupement = true;                 break;              }      break;    case hautGauche:	      for(var z=0; z<dimEnDiag; z++)        for(var k=0; k<dimensions-Math.abs(dimensions-z-1); k++) {          x = Math.max(0, dimensions-z-1) + k;          y = Math.max(0, z-dimensions+1) + k;          if (!c[x][y])            for(var kk=1; kk<dimensions-Math.abs(dimensions-z-1)-k; kk++)              if (c[x+kk][y+kk]) {                 c[x][y] = c[x+kk][y+kk];                 fp[x][y] = fp[x+kk][y+kk]; // v2.1                 afficheCase(x, y);                 c[x+kk][y+kk] = 0;                 fp[x+kk][y+kk] = 0; // v2.1                 afficheCase(x+kk, y+kk);                 regroupement = true;                 break;              }        }      break;  }  return regroupement;}//---------------------------------------------------------------------------function testeMonnaieTop(x, y){  if (c[x][y] > monnaieTop) {    monnaieTop = c[x][y];    localStorage.mt = monnaieTop;    if (monnaieTop > topMonnaieTop) {      topMonnaieTop = monnaieTop;        localStorage.tmt = topMonnaieTop;    }    afficheMonnaieTop();  }}//---------------------------------------------------------------------------function choisitFacePiece(piece) // v2.1{  if (nfp[piece]>0) {    var t=Math.floor(pfpMax*Math.random());  	if (t<pfp) { // pfp = probabilité d'apparition d'une face de pièce pfp<=pfpMax   	  t = 1+Math.floor(nfp[piece]*Math.random());  	  return t;  	}  	else  	  return 0;  }   else     return 0;}//---------------------------------------------------------------------------function incrementeCase(d, x, y){  c[x][y]++;  fp[x][y] = choisitFacePiece(c[x][y]); // v2.1  testeMonnaieTop(x, y);  score += val[c[x][y]];  afficheScore();  afficheCase(x, y);  c[x+dx[d]][y+dy[d]] = 0;  fp[x+dx[d]][y+dy[d]] = 0; // v2.1  afficheCase(x+dx[d], y+dy[d]);}//---------------------------------------------------------------------------function detripleCase(d, x, y, p0){  c[x][y] = svt[p0];  fp[x][y] = choisitFacePiece(c[x][y]); // v2.1  testeMonnaieTop(x, y);  score += val[c[x][y]];  afficheScore();  afficheCase(x, y);  for(var k=1; k<3; k++) {    c[x+k*dx[d]][y+k*dy[d]] = 0;    fp[x+k*dx[d]][y+k*dy[d]] = 0; // v2.1    afficheCase(x+k*dx[d], y+k*dy[d]);  }}//---------------------------------------------------------------------------function dequintupleCase(d, x, y, p0){  c[x][y] = svt[p0]+1;  fp[x][y] = choisitFacePiece(c[x][y]); // v2.1  testeMonnaieTop(x, y);  afficheCase(x, y);  score += val[c[x][y]];  afficheScore();  for(var k=1; k<5; k++) {    c[x+k*dx[d]][y+k*dy[d]] = 0;    fp[x+k*dx[d]][y+k*dy[d]] = 0;    afficheCase(x+k*dx[d], y+k*dy[d]);  }}//---------------------------------------------------------------------------function evalueMonnaieMin(){  monnaieMin = monnaies;  for(var x=0; x<dimensions; x++)    for(var y=0; y<dimensions; y++)      if (c[x][y]&&(c[x][y]<monnaieMin))        monnaieMin = c[x][y];  if (ter[monnaieMin]&&ter[monnaieMin-1]) // si 2[0]* alors 1[0]*    monnaieMin--;  if (monnaieMin>topMonnaieMin) { // v1.2  	topMonnaieMin = monnaieMin;  	localStorage.mmt = topMonnaieMin;  } afficheMonnaieTop(); // v1.2}//---------------------------------------------------------------------------function joueCoup(d){  var score0=score;  // 1. regroupe  var regroupement = regroupe(d);  // 2. simplifie  switch(d) {    case haut:	      for(var x=0; x<dimensions; x++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var y=0; y<dimensions; y++)          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              incrementeCase(d, x, y);              n = 0;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              detripleCase(d, x, y, p[2]);              n = 0;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              dequintupleCase(d, x, y, p[4]);              n = 0;            }          }      }      break;    case hautDroite:	      for(var z=0; z<dimEnDiag; z++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var k=0; k<dimensions-Math.abs(dimensions-z-1); k++) {          x = Math.min(dimensions-1, z) - k;          y = Math.max(0, z-dimensions+1) + k;          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              incrementeCase(d, x, y);              n = 0;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              detripleCase(d, x, y, p[2]);              n = 0;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              dequintupleCase(d, x, y, p[4]);              n = 0;            }          }        }      }      break;    case droite:	      for(var y=0; y<dimensions; y++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var x=dimensions-1; x>=0; x--)          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              incrementeCase(d, x, y);              n = 0;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              detripleCase(d, x, y, p[2]);              n = 0;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              dequintupleCase(d, x, y, p[4]);              n = 0;            }          }      }      break;    case basDroite:	      for(var z=0; z<dimEnDiag; z++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var k=0; k<dimensions-Math.abs(dimensions-z-1); k++) {          x = Math.min(dimensions-1, z) - k;          y = Math.min(dimensions-1, dimEnDiag-z-1) - k;          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              incrementeCase(d, x, y);              n = 0;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              detripleCase(d, x, y, p[2]);              n = 0;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              dequintupleCase(d, x, y, p[4]);              n = 0;            }          }        }      }      break;    case bas:	      for(var x=0; x<dimensions; x++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var y=dimensions-1; y>=0; y--)          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              incrementeCase(d, x, y);              n = 0;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              detripleCase(d, x, y, p[2]);              n = 0;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              dequintupleCase(d, x, y, p[4]);              n = 0;            }          }      }      break;    case basGauche:	      for(var z=0; z<dimEnDiag; z++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var k=0; k<dimensions-Math.abs(dimensions-z-1); k++) {          x = Math.max(0, dimensions-z-1) + k;          y = Math.min(dimensions-1, dimEnDiag-z-1) - k;          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              incrementeCase(d, x, y);              n = 0;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              detripleCase(d, x, y, p[2]);              n = 0;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              dequintupleCase(d, x, y, p[4]);              n = 0;            }          }        }      }      break;    case gauche:	      for(var y=0; y<dimensions; y++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var x=0; x<dimensions; x++)          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              incrementeCase(d, x, y);              n = 0;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              detripleCase(d, x, y, p[2]);              n = 0;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              dequintupleCase(d, x, y, p[4]);              n = 0;            }          }      }      break;    case hautGauche:	      for(var z=0; z<dimEnDiag; z++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var k=0; k<dimensions-Math.abs(dimensions-z-1); k++) {          x = Math.max(0, dimensions-z-1) + k;          y = Math.max(0, z-dimensions+1) + k;          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              incrementeCase(d, x, y);              n = 0;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              detripleCase(d, x, y, p[2]);              n = 0;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              dequintupleCase(d, x, y, p[4]);              n = 0;            }          }        }      }      break;  }  // 3. regroupe  regroupe(d);  // 4. Réévalue la monnaieMin (1 cent au départ)  evalueMonnaieMin();  // 5. tire  if (regroupement||(score>score0))    tirePiece();  // v2.1 : On augmente la probabilité d'afficher les faces de pièces  if (pfp<pfpMax) {     pfp=pfp+1;    localStorage.pfp=pfp;  }}//---------------------------------------------------------------------------function tirePiece(){  var n=0;  for(var i=0; i<dimensions; i++)    for(var j=0; j<dimensions; j++)      if (!c[i][j]) n++;  n=Math.floor(n*Math.random());  for(var i=0; (n>=0)&&(i<dimensions); i++)    for(var j=0; (n>=0)&&(j<dimensions); j++)       if (!c[i][j]) {        n--;        if (n<0) {          c[i][j]=monnaieMin+Math.floor((ter[monnaieMin]+ter[monnaieMin+1])*Math.random());          fp[i][j]=choisitFacePiece(c[i][j]); // v2.1          afficheCase(i, j);        }      }}//---------------------------------------------------------------------------function sauvePartie(){  localStorage.milleuro = true;  localStorage.s = score;  localStorage.mt = monnaieTop;  for(var i=0; i<dimensions; i++)    for(var j=0; j<dimensions; j++) {      localStorage.setItem('c'+(i)+(j), c[i][j]);      localStorage.setItem('fp'+(i)+(j), fp[i][j]); // v2.1    }}//---------------------------------------------------------------------------function initialiseGrille(){  for(var i=0; i<dimensions; i++)    for(var j=0; j<dimensions; j++) {      c[i][j]=0;      fp[i][j]=0; // v2.1      afficheCase(i, j);    }  pfp=0; // v2.1 : on ne sort pas de face de pièces au début mais petit à petit}//---------------------------------------------------------------------------function initialisePartie(){  score = 0;  monnaieMin = 1;  monnaieTop = 0;  afficheScore();  afficheTops();  afficheMonnaieTop();  initialiseGrille();  tirePiece();   tirePiece();   sauvePartie();}//---------------------------------------------------------------------------function adapteDimensions(){	var largeurEcran = document.getElementById('container').offsetWidth; 	var n=document.images.length;	var coef=largeurEcran/216;	taille=32*coef;	var hauteur=0;	var largeur=0;	for(var i=0; i<n; i++) {		hauteur=parseInt(document.images[i].height);		largeur=parseInt(document.images[i].width);		document.images[i].height=Math.round(coef*hauteur);		document.images[i].width=Math.round(coef*largeur);	}}//---------------------------------------------------------------------------function chargeTops(){  if (localStorage.getItem('ts'))    topScore = parseInt(localStorage.ts);  if (localStorage.getItem(idTopMonnaieTop))    topMonnaieTop = parseInt(localStorage.tmt);  if (localStorage.getItem(idTopMonnaieMin)) // v1.2    topMonnaieMin = parseInt(localStorage.mmt);  afficheTops();}//---------------------------------------------------------------------------function testePossibiliteCoup(){   var possible = false; // Pessimiste  for(var d=1; d<=directions; d++)   switch(d) {    case haut:	      for(var x=0; (!possible)&&(x<dimensions); x++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var y=0; (!possible)&&(y<dimensions); y++)          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              possible = true;              break;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              possible = true;              break;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              possible = true;              break;            }          }      }      break;    case hautDroite:	      for(var z=0; (!possible)&&(z<dimEnDiag); z++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var k=0; (!possible)&&(k<dimensions-Math.abs(dimensions-z-1)); k++) {          var x = Math.min(dimensions-1, z) - k;          var y = Math.max(0, z-dimensions+1) + k;          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              possible = true;              break;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              possible = true;              break;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              possible = true;              break;            }          }        }      }        break;    case droite:	      for(var y=0; (!possible)&&(y<dimensions); y++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var x=dimensions-1; (!possible)&&(x>=0); x--)          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              possible = true;              break;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              possible = true;              break;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              possible = true;              break;            }          }      }      break;    case basDroite:	      for(var z=0; (!possible)&&(z<dimEnDiag); z++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var k=0; (!possible)&&(k<dimensions-Math.abs(dimensions-z-1)); k++) {          x = Math.min(dimensions-1, z) - k;          y = Math.min(dimensions-1, dimEnDiag-z-1) - k;          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              possible = true;              break;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              possible = true;              break;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              possible = true;              break;            }          }        }      }        break;    case bas:	      for(var x=0; (!possible)&&(x<dimensions); x++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var y=dimensions-1; (!possible)&&(y>=0); y--)          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              possible = true;              break;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              possible = true;              break;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              possible = true;              break;            }          }      }      break;    case basGauche:	      for(var z=0; (!possible)&&(z<dimEnDiag); z++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var k=0; (!possible)&&(k<dimensions-Math.abs(dimensions-z-1)); k++) {          x = Math.max(0, dimensions-z-1) + k;          y = Math.min(dimensions-1, dimEnDiag-z-1) - k;          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              possible = true;              break;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              possible = true;              break;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              possible = true;              break;            }          }        }      }        break;    case gauche:	      for(var y=0; (!possible)&&(y<dimensions); y++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var x=0; (!possible)&&(x<dimensions); x++)          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              possible = true;              break;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              possible = true;              break;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              possible = true;              break;            }          }      }      break;    case hautGauche:	      for(var z=0; (!possible)&&(z<dimEnDiag); z++) {        var p = [0, 0, 0, 0, 0];        var n = 0;        for(var k=0; (!possible)&&(k<dimensions-Math.abs(dimensions-z-1)); k++) {          x = Math.max(0, dimensions-z-1) + k;          y = Math.max(0, z-dimensions+1) + k;          if (c[x][y]) {            for(var kk=4; kk>0; kk--)              p[kk] = p[kk-1];            p[0]=c[x][y];            n++;            if ((n>1)&&(bis[p[0]])&&(p[0]==p[1])) {              possible = true;              break;            }            if ((n>2)&&(ter[p[0]])&&(val[p[0]]+val[p[1]]+val[p[2]]==val[svt[p[2]]])) {              possible = true;              break;            }            if ((n>4)&&(ter[p[0]])&&(!bis[p[0]])&&(p[0]==p[1])&&(p[1]==p[2])&&(p[2]==p[3])&&(p[3]==p[4])) {              possible = true;              break;            }          }        }      }        break;   }  return possible;}//---------------------------------------------------------------------------function reste() {   casesVides = 0;   for(var x=0; x<dimensions; x++)     for(var y=0; y<dimensions; y++)       if (!c[x][y])         casesVides++;  return casesVides; }//---------------------------------------------------------------------------function chargePartie(){  score = parseInt(localStorage.s);  monnaieTop = parseInt(localStorage.mt);  for(var i=0; i<dimensions; i++)    for(var j=0; j<dimensions; j++) {      c[i][j] = parseInt(localStorage.getItem('c'+(i)+(j)));      // Debut v2.1 : on charge les faces de pièces      if (localStorage.getItem('fp'+(i)+(j)) == undefined)         fp[i][j] = 0;      else          fp[i][j] = parseInt(localStorage.getItem('fp'+(i)+(j)));      // Fin v2.1 : on charge les faces de pièces      afficheCase(i, j);    }   // Debut v2.1 : on charge la probabilité d'afficher les faces de pièces   if (localStorage.getItem('pfp') == undefined)     pfp = 0;   else      pfp = parseInt(localStorage.getItem('pfp'));   // Fin v2.1 : on charge la probabilité d'afficher les faces de pièces   afficheScore();    afficheTops();   evalueMonnaieMin(); // v1.2   touchable = true;   if ((!reste())&&(!testePossibiliteCoup()))     finDeJeu();}//---------------------------------------------------------------------------function alerteRAZ(){  if (fin&&(!alerte)) {    alerte = true;    var couleurRAZ = imgRAZ.src[imgRAZ.src.length-5];    if (couleurRAZ == rouge)      imgRAZ.src = chmPng + rien + extPng;    else      imgRAZ.src = chmPng + raz + rouge + extPng;    setTimeout( function() { alerte = false; alerteRAZ(); }, 500);  }}//---------------------------------------------------------------------------function finDeJeu(){ fin = true; alerteRAZ();}//---------------------------------------------------------------------------function debute(){    initialiseGrille();    for(d=haut; d<=hautGauche; d++)      document.getElementById(idDir[d]).src = chmPng + idDir[d] + noir + extPng;    document.getElementById(raz).src = chmPng + go + extPng;    setTimeout( function() {    				document.getElementById(raz).src = chmPng + raz + noir + extPng;    				initialisePartie();    				posTuto = 0;    				touchable = true;    			}, 1000);}//---------------------------------------------------------------------------function touche(action){  if (!touchable) {    if (posTuto==posTutoMax) // v1.2 (posTutoMax)      switch(action) {        case gauche: posTuto = 0; tutoriel(); return; break;        case droite: debute(); return; break;        default: return; break;      }    else       if (!action) {        posTuto=posTutoMax; // v1.2 (posTutoMax)        debute();        return;      }  }   else {    var couleurRAZ = imgRAZ.src[imgRAZ.src.length-5];    if (!action) {      if ((!fin)&&(couleurRAZ==noir)) {        imgRAZ.src = chmPng + raz + rouge + extPng;      }      else {        fin = false;        alerte = false;        initialisePartie();        imgRAZ.src = chmPng + raz + noir + extPng;      }    }    else {      if (couleurRAZ != noir)        imgRAZ.src = chmPng + raz + noir + extPng;      joueCoup(action);    }    if ((!reste())&&(!testePossibiliteCoup()))      finDeJeu();  }}//---------------------------------------------------------------------------function tutoriel(){  if (posTuto==posTutoMax) return; // v1.2 (posTutoMax)  for(d=haut; d<=hautGauche; d++)    document.getElementById(idDir[d]).src = chmPng + idDir[d] + noir + extPng;  document.getElementById(raz).src = chmPng + ok + extPng;  document.getElementById(idTopMonnaieMin).src = chmPng + rien + extPng; // v1.2  document.getElementById(fond + idTopMonnaieMin).src = chmPng + rien + extPng; // v1.2  if ((posTuto>=0)&&(posTuto<posTutoMax)) { // v1.2 (posTutoMax)  	initialiseGrille();  	if ((posTuto>0)&&!(posTuto%posTutoChg)) { // v2.2 : paramétrage posTutoChg & posTutoDemi  	  var dd = 1 + Math.floor((posTuto-1)/posTutoChg)%directions;  	  document.getElementById(idDir[dd]).src = chmPng + idDir[dd] + noir + extPng;  	}  	var d = (posTuto<posTutoDemi)?(1+Math.floor(posTuto/posTutoChg)%directions):droite;  	var t = 2*Math.floor(posTuto/posTutoDemi) + posTuto%2;  	document.getElementById(idDir[d]).src = chmPng + idDir[d] + imgCoul[posTuto%2] + extPng;  	if (d%2)  	  for(var i=0; i<dimensions; i++)  	    for(var j=0; j<dimensions; j++) {  	      switch(d) {  	        case haut:	c[i][j]=tc[t][i][dimensions-j-1];  	        			break;  		    case bas: 	c[i][j]=tc[t][i][j];  		              	break;  		    case gauche:c[i][j]=tc[t][j][dimensions-i-1];  	                	break;  		  	case droite:c[i][j]=tc[t][dimensions-j-1][i];  		             	break;  		  }	      if (c[i][j]<0) 	        c[i][j] = d*c[i][j]; // On oriente les flèches dans la bonne direction	      else	        if ((posTuto>=posTutoDemi)&&(c[i][j]>0))   	          c[i][j] = (c[i][j]+3*Math.floor((posTuto%posTutoDemi)/posTutoChg))%(monnaies+1); // On montre les différentes hauteurs de monnaies jusqu'à 500 euros  		  afficheCase(i, j);             	        }    else       for(var z=0; z<dimEnDiag; z++)        for(var k=0; k<dimensions-Math.abs(dimensions-z-1); k++) {          var i=0          var j=0;          switch(d) {            case hautDroite:i = Math.max(0, dimensions-z-1) + k;                           	j = Math.min(dimensions-1, dimEnDiag-z-1) - k;          					break;            case basDroite:	i = Math.max(0, dimensions-z-1) + k;                            j = Math.max(0, z-dimensions+1) + k;          					break;            case basGauche: i = Math.min(dimensions-1, z) - k;          					j = Math.max(0, z-dimensions+1) + k;          					break;            case hautGauche:i = Math.min(dimensions-1, z) - k;                           	j = Math.min(dimensions-1, dimEnDiag-z-1) - k;          					break;          }          c[i][j]=td[t][z][k];	      if (c[i][j]<0) 	        c[i][j] = d*c[i][j]; // On oriente les flèches dans la bonne direction  		  afficheCase(i, j);             	        }  }  posTuto++;  if (posTuto<posTutoMax) { // v1.2 (posTutoMax)    setTimeout( function() {    				tutoriel();    			}, 1000);  }  else {    document.getElementById(idDir[gauche]).src = chmPng + tuto + extPng;    document.getElementById(idDir[droite]).src = chmPng + ok + extPng;    document.getElementById(idDir[haut]).src = chmPng + rien + extPng;    document.getElementById(idDir[hautDroite]).src = chmPng + rien + extPng;    document.getElementById(idDir[basDroite]).src = chmPng + rien + extPng;    document.getElementById(idDir[bas]).src = chmPng + rien + extPng;    document.getElementById(idDir[basGauche]).src = chmPng + rien + extPng;    document.getElementById(idDir[hautGauche]).src = chmPng + rien + extPng;    document.getElementById(raz).src = chmPng + choix + extPng;    initialiseGrille();      }}//---------------------------------------------------------------------------function masqueVersion(){  imgRAZ.src = chmPng + raz + noir + extPng;  for(var d=1; d<=directions; d++)    document.getElementById(idDir[d]).src = chmPng + idDir[d] + noir + extPng;  document.getElementById(idScore + idEuro).src = chmPng + euro + noir + extPng;  document.getElementById(idTop + idEuro).src = chmPng + euro + rouge + extPng;  if (localStorage.getItem('milleuro')) {    document.getElementById(idScore).src = chmPng + stScore + extPng;    document.getElementById(idTop).src = chmPng + stTop + extPng;    chargeTops();    chargePartie();  }  else {    afficheScore();    afficheTops();    document.getElementById(idScore).src = chmPng + stScore + extPng;    document.getElementById(idTop).src = chmPng + stTop + extPng;    tutoriel();  }}//---------------------------------------------------------------------------function afficheVersion(){  document.getElementById('tcm').src = chmPng + stVersion[0] + noir + extPng;  document.getElementById('tm').src = chmPng + stVersion[2] + noir + extPng;}//---------------------------------------------------------------------------function bienvenue(){  imgRAZ = document.getElementById(raz);  afficheVersion();  setTimeout( function() {  				masqueVersion();  			  }, 2000);}//---------------------------------------------------------------------------